from __future__ import annotations
import os
from typing import Dict, Optional
from enum import Enum
import json
from .aws import AwsUtils
from .logger import logger

# from .logger import logger
from botocore.exceptions import ClientError


class SecretUtils:
    COLLECTED_SECRETS: Dict[str, str] = {}

    class SECRETS(Enum):
        TAG_NAME = "TAG_NAME"
        APP_ENV = "APP_ENV"
        SWARM_MODE = "SWARM_MODE"
        PYTHONUNBUFFERED = "PYTHONUNBUFFERED"
        POSTGRES_DBNAME = "POSTGRES_DBNAME"
        POSTGRES_USERNAME = "POSTGRES_USERNAME"
        POSTGRES_PASSWORD = "POSTGRES_PASSWORD"
        POSTGRES_HOST_AND_PORT = "POSTGRES_HOST_AND_PORT"
        MONGO_DBNAME = "MONGO_DBNAME"
        MONGO_USERNAME = "MONGO_USERNAME"
        MONGO_PASSWORD = "MONGO_PASSWORD"
        MONGO_HOST_AND_PORT = "MONGO_HOST_AND_PORT"
        SIGNZY_DEFAULT_BASE_URL = "SIGNZY_DEFAULT_BASE_URL"
        SIGNZY_ESIGN_BASE_URL = "SIGNZY_ESIGN_BASE_URL"
        SIGNZY_OKYC_BASE_URL = "SIGNZY_OKYC_BASE_URL"
        SIGNZY_OKYC_AUTHENTICATION_ID = "SIGNZY_OKYC_AUTHENTICATION_ID"
        SIGNZY_PATREON_ID = "SIGNZY_PATREON_ID"
        SIGNZY_AUTHENTICATION_ID = "SIGNZY_AUTHENTICATION_ID"
        DECENTRO_BASE_URL = "DECENTRO_BASE_URL"
        DECENTRO_CLIENT_SECRET = "DECENTRO_CLIENT_SECRET"
        DECENTRO_MODULE_SECRET = "DECENTRO_MODULE_SECRET"
        DECENTRO_PROVIDER_SECRET = "DECENTRO_PROVIDER_SECRET"
        DECENTRO_CLIENT_ID = "DECENTRO_CLIENT_ID"
        ULIP_AUTH_TOKEN = "ULIP_AUTH_TOKEN"
        SIGNZY_ESIGN_PATREON_ID = "SIGNZY_ESIGN_PATREON_ID"
        SIGNZY_ESIGN_AUTHENTICATION_ID = "SIGNZY_ESIGN_AUTHENTICATION_ID"
        SIGNZY_EMAIL = "SIGNZY_EMAIL"
        SIGNZY_CALLBACK_URL = "SIGNZY_CALLBACK_URL"
        SIGNZY_USERNAME = "SIGNZY_USERNAME"
        SIGNZY_PASSWORD = "SIGNZY_PASSWORD"
        ULIP_USERNAME = "ULIP_USERNAME"
        ULIP_PASSWORD = "ULIP_PASSWORD"
        SIGNZY_ESIGN_USERNAME = "SIGNZY_ESIGN_USERNAME"
        SIGNZY_ESIGN_PASSWORD = "SIGNZY_ESIGN_PASSWORD"
        ARYA_API_TOKEN = "ARYA_API_TOKEN"
        PICHAIN_BASE_URL = "PICHAIN_BASE_URL"
        PICHAIN_APIKEY = "PICHAIN_APIKEY"
        PICHAIN_ORG_ID = "PICHAIN_ORG_ID"
        MOCK_SERVER_BASE_URL = "MOCK_SERVER_BASE_URL"
        PROBE42_BASE_URL = "PROBE42_BASE_URL"
        PROBE42_API_VERSION = "PROBE42_API_VERSION"
        PROBE42_API_KEY = "PROBE42_API_KEY"
        DOMAIN = "DOMAIN"
        GUPSHUP_BASE_URL = "GUPSHUP_BASE_URL"
        GUPSHUP_USERNAME = "GUPSHUP_USERNAME"
        GUPSHUP_PASSWORD = "GUPSHUP_PASSWORD"
        SMARTPING_BASE_URL="SMARTPING_BASE_URL"
        SMARTPING_USERNAME="SMARTPING_USERNAME"
        SMARTPING_PASSWORD="SMARTPING_PASSWORD"
        SMARTPING_OTP_DLT_TEMPLATE_ID="SMARTPING_OTP_DLT_TEMPLATE_ID"
        SMARTPING_OTP_PRINCIPAL_ENTITY_ID="SMARTPING_OTP_PRINCIPAL_ENTITY_ID"
        FINBOX_API_KEY = "FINBOX_API_KEY"
        FINBOX_BASE_URL = "FINBOX_BASE_URL"
        KARZA_AUTHENTICATION_ID = "KARZA_AUTHENTICATION_ID"
        KARZA_BASE_URL = "KARZA_BASE_URL"
        DOCUMENT_UPLOAD_FOLDER = "DOCUMENT_UPLOAD_FOLDER"
        SUREPASS_BASE_URL = "SUREPASS_BASE_URL"
        SUREPASS_AUTH_TOKEN = "SUREPASS_AUTH_TOKEN"
        NAME_MATCH_THRESHOLD = "NAME_MATCH_THRESHOLD"
        ULIP_BASE_URL = "ULIP_BASE_URL"
        PERFIOS_BASE_URL = "PERFIOS_BASE_URL"
        PERFIOS_BANKSTATEMENT_CALLBACK_URL = "PERFIOS_BANKSTATEMENT_CALLBACK_URL"
        PERFIOS_PRIVATE_KEY = "PERFIOS_PRIVATE_KEY"
        KARZA_CKYC_BASE_URL = "KARZA_CKYC_BASE_URL"
        KARZA_CKYC_AUTHENTICATION_ID = "KARZA_CKYC_AUTHENTICATION_ID"
        TRANKBNK_DEFAULT_BASE_URL="TRANKBNK_DEFAULT_BASE_URL"
        TRANSBNK_API_TOKEN="TRANSBNK_API_TOKEN"
        GUPSHUP_OTP_DLT_TEMPLATE_ID="GUPSHUP_OTP_DLT_TEMPLATE_ID"
        GUPSHUP_OTP_PRINCIPAL_ENTITY_ID="GUPSHUP_OTP_PRINCIPAL_ENTITY_ID"
        GUPSHUP_OTP_VALIDITY_MINUTES="GUPSHUP_OTP_VALIDITY_MINUTES"
        ENRICH_DATA_AUTH_TOKEN="ENRICH_DATA_AUTH_TOKEN"
        ENRICH_DATA_BASE_URL="ENRICH_DATA_BASE_URL"
        ENRICH_DATA_COOKIE_TOKEN="ENRICH_DATA_COOKIE_TOKEN"
        RAZORPAY_BASE_URL="RAZORPAY_BASE_URL"
        RAZORPAY_CALLBACK_URL="RAZORPAY_CALLBACK_URL"
        RAZORPAY_BASIC_TOKEN="RAZORPAY_BASIC_TOKEN"
        RAZORPAY_AUTH_USERNAME="RAZORPAY_AUTH_USERNAME"
        RAZORPAY_AUTH_PASSWORD="RAZORPAY_AUTH_PASSWORD"
        AWS_EMAIL_ACCESS_KEY="AWS_EMAIL_ACCESS_KEY"
        AWS_EMAIL_SECRET_KEY="AWS_EMAIL_SECRET_KEY"
        SMARTPING_RAZORPAY_PAYMENT_LINK_DLT_TEMPLATE_ID="SMARTPING_RAZORPAY_PAYMENT_LINK_DLT_TEMPLATE_ID"
        SMARTPING_RAZORPAY_PAYMENT_PAID_DLT_TEMPLATE_ID="SMARTPING_RAZORPAY_PAYMENT_PAID_DLT_TEMPLATE_ID"
        SMARTPING_CASE_SUCCESS_LOGIN_BY_BM_DLT_TEMPLATE_ID="SMARTPING_CASE_SUCCESS_LOGIN_BY_BM_DLT_TEMPLATE_ID"
        SMARTPING_SUCCESS_OF_PD_STAGE_DLT_TEMPLATE_ID="SMARTPING_SUCCESS_OF_PD_STAGE_DLT_TEMPLATE_ID"
        SMARTPING_SUCCESS_OF_TECHNICAL_STAGE_1_DLT_TEMPLATE_ID="SMARTPING_SUCCESS_OF_TECHNICAL_STAGE_1_DLT_TEMPLATE_ID"
        SMARTPING_SUCCESS_OF_TECHNICAL_STAGE_2_DLT_TEMPLATE_ID="SMARTPING_SUCCESS_OF_TECHNICAL_STAGE_2_DLT_TEMPLATE_ID"
        SMARTPING_REJECT_APPLICATION_DLT_TEMPLATE_ID="SMARTPING_REJECT_APPLICATION_DLT_TEMPLATE_ID"
        RAZORPAY_BASIC_HL_TOKEN="RAZORPAY_BASIC_HL_TOKEN"
        RAZORPAY_BASIC_UBL_TOKEN="RAZORPAY_BASIC_UBL_TOKEN"
        BUREAU_BASE_URL="BUREAU_BASE_URL"
        BUREAU_CREDENTIAL_ID="BUREAU_CREDENTIAL_ID"
        BUREAU_CREDENTIAL_SECRET="BUREAU_CREDENTIAL_SECRET"
        DIGIO_TEMPLATE_BASE_URL="DIGIO_TEMPLATE_BASE_URL"
        DIGIO_DOCUMENT_BASE_URL="DIGIO_DOCUMENT_BASE_URL"
        DIGIO_AUTHENTICATION_TOKEN="DIGIO_AUTHENTICATION_TOKEN"
        DIGIO_ENACH_BASE_URL="DIGIO_ENACH_BASE_URL"
        DIGIO_API_KEY="DIGIO_API_KEY"


    @staticmethod
    def collect_secrets():
        aws_secret_id = f"cd_{os.environ.get('TAG_NAME')}"
        logger.info(f"AWS SECRET ID: {aws_secret_id}")
        try:
            get_secret_response: dict = (
                AwsUtils.SECRETS_MANAGER_CLIENT.get_secret_value(SecretId=aws_secret_id)
            )
            secret_string: str = get_secret_response.get("SecretString")
            aws_secret_values: dict = json.loads(secret_string)
        except ClientError as e:
            raise e
        for SECRET in SecretUtils.SECRETS:
            secret_value = aws_secret_values.get(SECRET.value)
            env_secret_value = os.environ.get(SECRET.value)
            if env_secret_value is not None:
                secret_value = env_secret_value
            SecretUtils.COLLECTED_SECRETS[SECRET.value] = secret_value

    @staticmethod
    def get_secret_value(secret: SecretUtils.SECRETS) -> Optional[str]:
        secret_value = SecretUtils.COLLECTED_SECRETS.get(secret.value)
        env_secret_value = os.environ.get(secret.value)
        if env_secret_value is not None and (isinstance(env_secret_value,str) and len(env_secret_value) > 0):
            secret_value = env_secret_value
        return secret_value

    @staticmethod
    def set_secret_value(secret: SecretUtils.SECRETS, value: str):
        SecretUtils.COLLECTED_SECRETS[secret.value] = value
